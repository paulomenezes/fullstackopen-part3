{"version":3,"sources":["services/persons.js","components/Filter.js","components/PersonForm.js","components/Person.js","components/Persons.js","components/Notification.js","components/App.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","put","delete","Filter","filter","onChange","value","PersonForm","onSubmit","name","phone","onChangeName","onChangePhone","type","Person","person","onDelete","number","onClick","persons","filteredPersons","p","toLowerCase","includes","map","key","Notification","message","className","App","useState","setPersons","newName","setNewName","newPhone","setNewPhone","setFilter","undefined","setMessage","useEffect","personService","then","response","data","setMessages","setTimeout","event","target","preventDefault","alreadExistIndex","findIndex","confirmUpdate","window","confirm","alreadExist","newPerson","newPersonList","concat","Persons","find","catch","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c57a253.chunk.js","sourcesContent":["import axios from 'axios';\nconst baseUrl = 'http://localhost:3001/persons';\n\nconst getAll = () => {\n  return axios.get(baseUrl);\n};\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject);\n};\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject);\n};\n\nconst remove = id => {\n  return axios.delete(`${baseUrl}/${id}`);\n};\n\nexport default {\n  getAll,\n  create,\n  update,\n  remove,\n};\n","import React from 'react';\n\nconst Filter = ({ filter, onChange }) => {\n  return (\n    <div>\n      filter shown with: <input value={filter} onChange={onChange} />\n    </div>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\n\nconst PersonForm = ({ onSubmit, name, phone, onChangeName, onChangePhone }) => {\n  return (\n    <form onSubmit={onSubmit}>\n      <div>\n        name: <input value={name} onChange={onChangeName} />\n      </div>\n      <div>\n        phone: <input value={phone} onChange={onChangePhone} />\n      </div>\n      <div>\n        <button type='submit'>add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default PersonForm;\n","import React from 'react';\n\nconst Person = ({ person, onDelete }) => {\n  return (\n    <div>\n      {person.name} {person.number} <button onClick={() => onDelete(person.id)}>delete</button>\n    </div>\n  );\n};\n\nexport default Person;\n","import React from 'react';\n\nimport Person from './Person';\n\nconst PersonForm = ({ persons, filter, onDelete }) => {\n  const filteredPersons = persons.filter(p => p.name.toLowerCase().includes(filter.toLowerCase()));\n\n  return (\n    <div>\n      {filteredPersons.map(person => (\n        <Person key={person.name} person={person} onDelete={onDelete} />\n      ))}\n    </div>\n  );\n};\n\nexport default PersonForm;\n","import React from 'react';\n\nconst Notification = ({ message, type }) => {\n  if (!message) {\n    return null;\n  }\n\n  return <div className={type}>{message}</div>;\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from 'react';\n\nimport personService from '../services/persons';\nimport Filter from './Filter';\nimport PersonForm from './PersonForm';\nimport Persons from './Persons';\nimport Notification from './Notification';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newPhone, setNewPhone] = useState('');\n  const [filter, setFilter] = useState('');\n  const [message, setMessage] = useState({ message: undefined, type: undefined });\n\n  const onChangeName = event => setNewName(event.target.value);\n  const onChangePhone = event => setNewPhone(event.target.value);\n  const onChangeFilter = event => setFilter(event.target.value);\n\n  const onSubmit = event => {\n    event.preventDefault();\n\n    const alreadExistIndex = persons.findIndex(p => p.name === newName);\n\n    if (alreadExistIndex >= 0) {\n      const confirmUpdate = window.confirm(\n        `${newName} is already added to phonebook, replace the old number with a new one?`,\n      );\n\n      const alreadExist = persons[alreadExistIndex];\n\n      const newPerson = {\n        ...alreadExist,\n        number: newPhone,\n      };\n\n      if (confirmUpdate) {\n        personService.update(alreadExist.id, newPerson).then(response => {\n          const newPersonList = [...persons];\n          newPersonList[alreadExistIndex] = newPerson;\n\n          setPersons(newPersonList);\n          setNewName('');\n          setNewPhone('');\n        });\n\n        return;\n      } else {\n        return;\n      }\n    }\n\n    const newPerson = {\n      name: newName,\n      number: newPhone,\n    };\n\n    personService.create(newPerson).then(response => {\n      setPersons(persons.concat(response.data));\n      setNewName('');\n      setNewPhone('');\n\n      setMessages(`Added ${newPerson.name}`, 'success');\n    });\n  };\n\n  useEffect(() => {\n    personService.getAll().then(response => {\n      setPersons(response.data);\n    });\n  }, []);\n\n  const onDelete = id => {\n    const person = persons.find(p => p.id === id);\n\n    const confirmDelete = window.confirm(`Delete ${person.name}?`);\n\n    if (confirmDelete) {\n      personService\n        .remove(id)\n        .then(() => {\n          setPersons(persons.filter(p => p.id !== id));\n        })\n        .catch(error => {\n          setMessages(`Information of ${person.name} has already been removed from server`, 'error');\n          setPersons(persons.filter(p => p.id !== id));\n        });\n    }\n  };\n\n  const setMessages = (message, type) => {\n    setMessage({\n      message,\n      type,\n    });\n\n    setTimeout(() => {\n      setMessage({ message: undefined, type: undefined });\n    }, 5000);\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message.message} type={message.type} />\n      <Filter filter={filter} onChange={onChangeFilter} />\n      <h2>Add a new</h2>\n      <PersonForm\n        name={newName}\n        phone={newPhone}\n        onChangeName={onChangeName}\n        onChangePhone={onChangePhone}\n        onSubmit={onSubmit}\n      />\n      <h2>Numbers</h2>\n      <Persons persons={persons} filter={filter} onDelete={onDelete} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}